// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PrebidMobileUnity
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import PrebidMobile
@_exported import PrebidMobileUnity
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @objcMembers public class ErrorInfo : ObjectiveC.NSObject {
  @objc final public let errMsg: Swift.String
  @objc public func toDictionary() -> Foundation.NSDictionary
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class KnxInterstitialManager : ObjectiveC.NSObject {
  @objc weak public var eventHandler: (any PrebidMobile.PBMPrimaryAdRequesterProtocol)?
  @objc weak public var adListener: (any PrebidMobileUnity.AdListener)?
  @objc weak public var adRequestListener: (any PrebidMobileUnity.AdRequestListener)? {
    @objc get
    @objc set
  }
  @objc public var adFormats: Swift.Set<PrebidMobile.AdFormat> {
    @objc get
    @objc set
  }
  @objc public func setImpExtraParams(_ key: Swift.String, _ value: Any)
  @objc public func getImpExtraParams() -> [Swift.String : Any]
  convenience public init(configID: Swift.String, minSizePercentage: CoreFoundation.CGSize? = nil, eventHandler: Swift.AnyObject? = nil)
  @objc public func destroy()
  @objc deinit
  @objc public func loadAd()
  @objc public func showAd(from controller: UIKit.UIViewController)
}
extension PrebidMobileUnity.KnxInterstitialManager : PrebidMobile.InterstitialAdUnitDelegate {
  @objc dynamic public func interstitialDidReceiveAd(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit)
  @objc dynamic public func interstitial(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit, didFailToReceiveAdWithError error: (any Swift.Error)?)
  @objc dynamic public func interstitialWillPresentAd(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit)
  @objc dynamic public func interstitialDidDismissAd(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit)
  @objc dynamic public func interstitialWillLeaveApplication(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit)
  @objc dynamic public func interstitialDidClickAd(_ interstitial: PrebidMobile.InterstitialRenderingAdUnit)
}
@objc public protocol RewardedAdListener : PrebidMobileUnity.AdListener {
  @objc func onUserEarnedReward(adInfo: PrebidMobileUnity.AdInfo, reward: PrebidMobile.PrebidReward?)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class KnxBannerView : UIKit.UIView, PrebidMobile.DisplayViewLoadingDelegate, PrebidMobile.DisplayViewInteractionDelegate {
  @objc @_Concurrency.MainActor @preconcurrency final public let adUnitConfig: PrebidMobile.AdUnitConfig
  @objc @_Concurrency.MainActor @preconcurrency public var configID: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setImpExtraParams(_ key: Swift.String, _ value: Any)
  @objc @_Concurrency.MainActor @preconcurrency public func getImpExtraParams() -> [Swift.String : Any]
  @objc @_Concurrency.MainActor @preconcurrency weak public var adListener: (any PrebidMobileUnity.AdListener)?
  @objc @_Concurrency.MainActor @preconcurrency weak public var adRequestListener: (any PrebidMobileUnity.AdRequestListener)?
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(configID: Swift.String, adSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, configID: Swift.String, adSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency public func destroy()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func loadAd()
  @objc @_Concurrency.MainActor @preconcurrency public func canShow() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func showAd()
  @objc @_Concurrency.MainActor @preconcurrency public func setPluginEventDelegate(_ pluginEventDelegate: any PrebidMobile.PluginEventDelegate)
  @_Concurrency.MainActor @preconcurrency @objc public func displayViewDidLoadAd(_ displayView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc public func displayView(_ displayView: UIKit.UIView, didFailWithError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func trackImpression(forDisplayView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc public func viewControllerForModalPresentation(fromDisplayView: UIKit.UIView) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc public func didLeaveApp(from displayView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc public func willPresentModal(from displayView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc public func didDismissModal(from displayView: UIKit.UIView)
}
@objc public class KnxRewardedEventHandler : ObjectiveC.NSObject, PrebidMobile.RewardedEventHandlerProtocol {
  @objc weak public var loadingDelegate: (any PrebidMobile.InterstitialEventLoadingDelegate)?
  @objc weak public var interactionDelegate: (any PrebidMobile.RewardedEventInteractionDelegate)?
  weak public var adRequestListener: (any PrebidMobileUnity.AdRequestListener)?
  public var adUnitId: Swift.String
  public init(adUnitId: Swift.String)
  @objc public var isReady: Swift.Bool {
    @objc get
  }
  @objc public func show(from controller: UIKit.UIViewController?)
  @objc public func requestAd(with bidResponse: PrebidMobile.BidResponse?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AdInfo : ObjectiveC.NSObject {
  @objc public var adUnitId: Swift.String
  @objc public var adFormat: Swift.String
  @objc public func setAuctionResult(_ auctionResult: PrebidMobileUnity.AuctionResult?)
  @objc public func toDictionary() -> Foundation.NSDictionary
  @objc deinit
}
@objc @objcMembers public class KnxInterstitialEventHandler : ObjectiveC.NSObject, PrebidMobile.InterstitialEventHandlerProtocol {
  @objc weak public var loadingDelegate: (any PrebidMobile.InterstitialEventLoadingDelegate)?
  @objc weak public var interactionDelegate: (any PrebidMobile.InterstitialEventInteractionDelegate)?
  @objc weak public var adRequestListener: (any PrebidMobileUnity.AdRequestListener)?
  @objc public var adUnitId: Swift.String
  @objc public init(adUnitId: Swift.String)
  @objc public var isReady: Swift.Bool {
    @objc get
  }
  @objc public func show(from controller: UIKit.UIViewController?)
  @objc public func requestAd(with bidResponse: PrebidMobile.BidResponse?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AuctionResult : ObjectiveC.NSObject, Swift.Encodable {
  @objc public func toDictionary() -> Foundation.NSDictionary
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol AdListener : ObjectiveC.NSObjectProtocol {
  @objc func onAdLoaded(adInfo: PrebidMobileUnity.AdInfo)
  @objc func onAdFailed(adInfo: PrebidMobileUnity.AdInfo, error: any Swift.Error)
  @objc func onAdDisplayed(adInfo: PrebidMobileUnity.AdInfo)
  @objc func onAdClicked(adInfo: PrebidMobileUnity.AdInfo)
  @objc func onAdClosed(adInfo: PrebidMobileUnity.AdInfo)
  @objc func viewControllerForModalPresentation(fromDisplayView: UIKit.UIView) -> UIKit.UIViewController?
}
@objc public protocol AdRequestListener : ObjectiveC.NSObjectProtocol {
  @objc func onRequestSuccess(auctionResult: PrebidMobileUnity.AuctionResult)
  @objc func onRequestFailed(adUnitId: Swift.String, errorInfo: PrebidMobileUnity.ErrorInfo)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class KnxRewardedManager : ObjectiveC.NSObject {
  @objc weak public var eventHandler: (any PrebidMobile.PBMPrimaryAdRequesterProtocol)?
  @objc weak public var adListener: (any PrebidMobileUnity.RewardedAdListener)?
  @objc weak public var adRequestListener: (any PrebidMobileUnity.AdRequestListener)? {
    @objc get
    @objc set
  }
  @objc public var isReady: Swift.Bool {
    @objc get
  }
  @objc public var adFormats: Swift.Set<PrebidMobile.AdFormat> {
    @objc get
    @objc set
  }
  @objc public func setImpExtraParams(_ key: Swift.String, _ value: Any)
  @objc public func getImpExtraParams() -> [Swift.String : Any]
  convenience public init(configID: Swift.String, minSizePercentage: CoreFoundation.CGSize? = nil, eventHandler: Swift.AnyObject? = nil)
  @objc public func destroy()
  @objc deinit
  @objc public func loadAd()
  @objc public func show(from controller: UIKit.UIViewController)
}
extension PrebidMobileUnity.KnxRewardedManager : PrebidMobile.RewardedAdUnitDelegate {
  @objc dynamic public func rewardedAdDidReceiveAd(_ rewardedAd: PrebidMobile.RewardedAdUnit)
  @objc dynamic public func rewardedAdUserDidEarnReward(_ rewardedAd: PrebidMobile.RewardedAdUnit, reward: PrebidMobile.PrebidReward)
  @objc dynamic public func rewardedAd(_ rewardedAd: PrebidMobile.RewardedAdUnit, didFailToReceiveAdWithError error: (any Swift.Error)?)
  @objc dynamic public func rewardedAdWillPresentAd(_ rewardedAd: PrebidMobile.RewardedAdUnit)
  @objc dynamic public func rewardedAdDidDismissAd(_ rewardedAd: PrebidMobile.RewardedAdUnit)
  @objc dynamic public func rewardedAdWillLeaveApplication(_ rewardedAd: PrebidMobile.RewardedAdUnit)
  @objc dynamic public func rewardedAdDidClickAd(_ rewardedAd: PrebidMobile.RewardedAdUnit)
}
